
def camp_add_user(SERVER,user):
	""" This method used to add the campaign and users list  into freeswitch"""
	user_in_server = SERVER.freeswitch.api("callcenter_config","agent list "+user.extension)
	try:
		if user_in_server[1:][0].split('|')[0] != user.extension:
			SERVER.freeswitch.api("callcenter_config",
					"agent add %s %s" % (user.extension, user.type))
		if 'freetdm' not in user.contact:
			SERVER.freeswitch.api("callcenter_config",
					"agent set contact %s %s/%s@%s" % (user.extension, user.contact,
						user.extension, user.domain.ip_address))
		else:
			SERVER.freeswitch.api("callcenter_config",
					"agent set contact %s %s/%s" % (user.extension, user.contact,
						user.extension))
		SERVER.freeswitch.api("callcenter_config",
				"agent set type %s %s" % (user.extension, user.type))
		SERVER.freeswitch.api("callcenter_config",
				"agent set status %s '%s'" % (user.extension, user.status))
		SERVER.freeswitch.api("callcenter_config",
				"agent set max_no_answer %s %s" % (user.extension,
					user.max_no_answer))
		SERVER.freeswitch.api("callcenter_config",
				"agent set wrap_up_time %s %s" % (user.extension,
					user.wrap_up_time))
		SERVER.freeswitch.api("callcenter_config",
				"agent set reject_delay_time %s %s" % (user.extension,
					user.reject_delay_time))
		SERVER.freeswitch.api("callcenter_config",
				"agent set busy_delay_time %s %s" % (user.extension,
					user.busy_delay_time))
	except socket.error as v:
		print ("RPC Error %s: Freeswitch RPC module may not be" \
				"loaded or properly configured" % v)
	finally:
		transaction.commit()
		connections['default'].close()
		
def campaign_action_rpc(**kwargs):
	""" This method is used to chcek the campaign action with the freeswitch """
	campaign = kwargs["instance"]
	SERVER = freeswicth_server(campaign.trunk.switch.ip_address)	
	try:
		campaigns = kwargs["instance"]
		if (kwargs.get("created", None) in [True, False]):
			#    (campaign.enabled <= datetime.utcnow().replace(tzinfo=utc))):
			for campaign in campaigns.all():
				SERVER.freeswitch.api("callcenter_config",
						"queue load %s" % (campaign.slug))
		else:
			for campaign in campaigns.all():
				SERVER.freeswitch.api("callcenter_config",
						"queue unload %s" % (campaign.slug))
	except socket.error as v:
		print ("RPC Error %s: Freeswitch RPC module may not be" \
				"loaded or properly configured" % v[0])
	finally:
		transaction.commit()
		connections['default'].close()

def campaign_rpc(**kwargs):
	""" This method is used to create campaign rpc"""
	try:
		campaign = kwargs["instance"]
		camp_domain = campaign.campaign.switch.ip_address
		SERVER = freeswicth_server(camp_domain)
		if ((kwargs.get("created", None) in [True, False]) and
				(campaign.campaign.status == 'Active')):
			SERVER.freeswitch.api("callcenter_config",
					"queue load %s" % (campaign.campaign.slug))
			from callcenter.models import Campaign,User
			users = User.objects.filter(Q(group__in = Campaign.objects.get(
							slug = campaign.campaign.slug).group.all())|Q(
							id__in = Campaign.objects.get(slug = campaign.campaign.slug
							).users.all().values_list("id", flat=True))).prefetch_related()
			for user in users:
				if user.uservariable.domain.ip_address != camp_domain:
					camp_add_user(SERVER,user.uservariable)
		else:
			SERVER.freeswitch.api("callcenter_config",
					"queue unload %s" % (campaign.campaign.slug))
		#Create server xml file
		from django.core import management
		management.call_command('create_call_server_xml')
	except socket.error as v:
		print ("RPC Error %s: Freeswitch RPC module may not be" \
				"loaded or properly configured campaign" % v)
	finally:
		transaction.commit()
		connections['default'].close()

def user_campaign_rpc(**kwargs):
	""" this method is used to create the user campaign rpc in freeswitch """
	try:
		campaign = kwargs["instance"]
		SERVER =freeswicth_server(campaign.switch.ip_address)
		if (kwargs["action"] == "pre_remove"):
			fs_camp_tiers = SERVER.freeswitch.api("callcenter_config",
					"queue list tiers '%s'" % str(campaign.slug))
			camp_tiers = fs_camp_tiers.splitlines()
			for tier in camp_tiers[1:-1]:
				fs_tier =  tier.split('|')
				SERVER.freeswitch.api("callcenter_config",
						"tier del %s %s" % (fs_tier[0], fs_tier[1]))
		if (kwargs["action"] == "post_add"):
			for user in campaign.users.all():
				SERVER.freeswitch.api("callcenter_config",
					"tier add %s %s %s %s" % (campaign.slug, user.properties.extension,
						user.properties.level, user.properties.position))
		#Create server xml file
		from django.core import management
		management.call_command('create_call_server_xml')
	except socket.error as v:
		print ("RPC Error %s: Freeswitch RPC module may not be" \
				"loaded or properly configured" % v[0])
	finally:
		transaction.commit()
		connections['default'].close()

def group_campaign_rpc(**kwargs):
	""" this method create a group in campaign with freeswitch """
	try:
		campaign = kwargs["instance"]
		SERVER =freeswicth_server(campaign.switch.ip_address)
		if (kwargs["action"] == "pre_remove"):
			fs_camp_tiers = SERVER.freeswitch.api("callcenter_config",
					"queue list tiers '%s'" % str(campaign.slug))
			camp_tiers = fs_camp_tiers.splitlines()
			for tier in camp_tiers[1:-1]:
				fs_tier =  tier.split('|')
				SERVER.freeswitch.api("callcenter_config",
						"tier del %s %s" % (fs_tier[0], fs_tier[1]))
		if (kwargs["action"] == "post_add"):
			from callcenter.models import User,Campaign
			users = User.objects.filter(group__in = Campaign.objects.get(
							slug = campaign.slug).group.all()).prefetch_related()			
			for user in users:
				SERVER.freeswitch.api("callcenter_config",
					"tier add %s %s %s %s" % (campaign.slug, user.properties.extension,
						user.properties.level, user.properties.position))
		#Create server xml file
		from django.core import management
		management.call_command('create_call_server_xml')
	except socket.error as v:
		print ("RPC Error %s: Freeswitch RPC module may not be" \
				"loaded or properly configured" % v[0])
	finally:
		transaction.commit()
		connections['default'].close()

def del_campaign_rpc(**kwargs):
	""" this method deletes the created campaign in the freeswitch """
	try:
		campaign = kwargs["instance"]
		camp_domain = campaign.switch.ip_address
		SERVER = freeswicth_server(camp_domain)
		SERVER.freeswitch.api("callcenter_config",
					"queue unload %s" % (campaign.slug))
		#Create server xml file
		from django.core import management
		management.call_command('create_call_server_xml')
	except socket.error as v:
		print ("RPC Error %s: Freeswitch RPC module may not be" \
				"loaded or properly configured" % v[0])
	finally:
		transaction.commit()
		connections['default'].close()

def usr_campaign_switch_rpc(**kwargs):
	""" this method will create the user campaign and switch config in freeswith """
	try:
		switch = kwargs["instance"]
		switch_address = switch.ip_address
		SERVER = freeswicth_server(switch_address)
		if switch.status == 'Active':
			from callcenter.models import Campaign,User,UserVariable
			campaigns = Campaign.objects.filter(switch=switch)
			for campaign in campaigns:
				camp_domain = campaign.switch.ip_address
				SERVER.freeswitch.api("callcenter_config",
						"queue load %s" % (campaign.slug))
				users = User.objects.filter(Q(group__in = Campaign.objects.get(
								slug = campaign.slug).group.all())|Q(
								id__in = Campaign.objects.get(slug = campaign.slug
								).users.all().values_list("id", flat=True))).prefetch_related()
				for user in users:
					if user.uservariable.domain.ip_address != camp_domain:
						camp_add_user(SERVER,user.uservariable)
		#Create server xml file
		from django.core import management
		management.call_command('create_call_server_xml')
		SERVER.freeswitch.api("reload", "mod_callcenter")
		print("Callcenter loaded")
	except socket.error as v:
		print ("RPC Error %s: Freeswitch RPC module may not be" \
				"loaded or properly configured campaign" % v)
	finally:
		transaction.commit()
		connections['default'].close()
